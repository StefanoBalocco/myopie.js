type Nullable<T> = T | null;
type TemplateEngine = (data: any) => string;
type HookInit = (dataCurrent: any) => void;
type HookRender = (dataCurrent: any, dataPrevious: any) => void;
export default class myopie {
    private static _objectToString;
    private readonly _selector;
    private readonly _template;
    private readonly _timeout;
    private readonly _inputToPath;
    private readonly _document;
    private readonly _onInput;
    private _timer;
    private _dataCurrent;
    private _dataPrevious;
    private _inited;
    private _hooks;
    constructor(document: Document, selector: string, template: TemplateEngine, initialData?: any, inputToPath?: string[][], timeout?: number, renderOnInput?: boolean);
    private static _DeepClone;
    private static _SimilarNode;
    private static _DiffNode;
    destroy(): void;
    HooksInitAddPre(hookFunction: HookInit): void;
    HooksInitAddPost(hookFunction: HookInit): void;
    HooksRenderAddPre(hookFunction: HookRender): void;
    HooksRenderAddPost(hookFunction: HookRender): void;
    render(): void;
    get(path: Nullable<string>): any;
    set(path: string, value: any, render?: boolean): void;
}
export {};
