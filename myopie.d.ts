type Nullable<T> = T | null;
type TemplateEngine = (data: any) => string;
type HookInit = (dataCurrent: any) => void;
type HookRender = (dataCurrent: any, dataPrevious: any) => void;
export default class Myopie {
    private static readonly _document;
    private static readonly _objectToString;
    private static readonly _nodeTypeElement;
    private static readonly _nodeTypeText;
    private static readonly _regexpPathSplit;
    private static readonly _extractors;
    private static readonly _navigators;
    private readonly _inputToPath;
    private readonly _selector;
    private readonly _template;
    private readonly _templateElement;
    private readonly _timeout;
    private readonly _onInput;
    private readonly _handlersPermanent;
    private _dataCurrent;
    private _dataPrevious;
    private _inited;
    private _lastRendering;
    private _timer;
    private _hooks;
    constructor(selector: string, template: TemplateEngine, initialData?: any, inputToPath?: string[][], timeout?: number, renderOnInput?: boolean);
    private static _deepClone;
    private static _removeEventListeners;
    private static _nodeSimilar;
    private static _nodeDiff;
    renderDebounce(): void;
    destroy(): void;
    hooksInitAddPre(hookFunction: HookInit): void;
    hooksInitAddPost(hookFunction: HookInit): void;
    hooksRenderAddPre(hookFunction: HookRender): void;
    hooksRenderAddPost(hookFunction: HookRender): void;
    handlersPermanentAdd(selector: string, event: string, listener: (event: Event) => void): boolean;
    handlersPermanentDel(selector: string, event?: string, listener?: (event: Event) => void): boolean;
    render(): boolean;
    get(path: Nullable<string>): any;
    set(path: string, value: any, render?: boolean): boolean;
}
export {};
